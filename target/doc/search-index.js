var searchIndex = {};
searchIndex["rect_packer"] = {"doc":"Usage example:","items":[[3,"Rect","rect_packer","Rectangle with integer coordinates.",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[12,"width","","",0,null],[12,"height","","",0,null],[3,"Packer","","`Packer` is the main structure in this crate. It holds packing context.",null,null],[3,"Config","","Describes size and padding requirements of rectangle packing.",null,null],[12,"width","","Width of the encompassing rectangle.",1,null],[12,"height","","Height of the encompassing rectangle.",1,null],[12,"border_padding","","Minimum spacing between border and rectangles.",1,null],[12,"rectangle_padding","","Minimum spacing between rectangles.",1,null],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"new","","",0,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"rect"}}],[11,"top","","",0,{"inputs":[{"name":"rect"}],"output":{"name":"i32"}}],[11,"bottom","","",0,{"inputs":[{"name":"rect"}],"output":{"name":"i32"}}],[11,"left","","",0,{"inputs":[{"name":"rect"}],"output":{"name":"i32"}}],[11,"right","","",0,{"inputs":[{"name":"rect"}],"output":{"name":"i32"}}],[11,"area","","",0,{"inputs":[{"name":"rect"}],"output":{"name":"i32"}}],[11,"intersects","","Check if intersection of two rectangles is non empty.",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"contains","","Check if `other` rectangle is completely inside `self`.",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"contains_point","","Check if given pixel is inside this rectangle.",0,{"inputs":[{"name":"rect"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"packer"}],"output":{"name":"packer"}}],[11,"new","","Create new empty `Packer` with the provided parameters.",2,{"inputs":[{"name":"config"}],"output":{"name":"packer"}}],[11,"pack","","Pack new rectangle. Returns position of newly added rectangle. If there is not enough space returns `None`.\nIf it returns `None` you can still try to add smaller rectangles.",2,{"inputs":[{"name":"packer"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"option"}}],[11,"can_pack","","Check if rectangle with the specified size can be added. This is equivalent to `.pack(width, height, allow_rotation).is_some()` but faster.",2,{"inputs":[{"name":"packer"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"config"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"config"},{"name":"config"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"config"}],"output":{"name":"config"}}]],"paths":[[3,"Rect"],[3,"Config"],[3,"Packer"]]};
initSearch(searchIndex);
